USE ORDERS;

-- 1. WRITE A QUERY TO DISPLAY CUSTOMER FULL NAME WITH THEIR TITLE (MR/MS), BOTH FIRST NAME AND LAST NAME ARE IN UPPER CASE WITH 
-- CUSTOMER EMAIL ID, CUSTOMER CREATIONDATE AND DISPLAY CUSTOMERâ€™S CATEGORY AFTER APPLYING BELOW CATEGORIZATION RULES:
	-- i.IF CUSTOMER CREATION DATE YEAR <2005 THEN CATEGORY A
    -- ii.IF CUSTOMER CREATION DATE YEAR >=2005 AND <2011 THEN CATEGORY B
    -- iii.IF CUSTOMER CREATION DATE YEAR>= 2011 THEN CATEGORY C
    
    -- HINT: USE CASE STATEMENT, NO PERMANENT CHANGE IN TABLE REQUIRED. [NOTE: TABLES TO BE USED -ONLINE_CUSTOMER TABLE]



SELECT 
	CONCAT(
	CASE
		WHEN CUSTOMER_GENDER = 'M' THEN 'MR'
		ELSE 'MS'
	END,
	'  ', UPPER(CUSTOMER_FNAME), '  ',UPPER(CUSTOMER_LNAME)
	) AS CUSTOMER_FULL_NAME,
	CUSTOMER_EMAIL, CUSTOMER_CREATION_DATE,
		CASE
			WHEN YEAR(CUSTOMER_CREATION_DATE) < 2005 THEN 'CATEGORY A'
			WHEN YEAR(CUSTOMER_CREATION_DATE) >= 2005 AND YEAR(CUSTOMER_CREATION_DATE) < 2011 THEN 'CATEGORY B'
			WHEN YEAR(CUSTOMER_CREATION_DATE) >= 2011 THEN 'CATEGORY C'
		END AS CUSTOMER_CATEGORY    
	FROM ONLINE_CUSTOMER;




-- 2. WRITE A QUERY TO DISPLAY THE FOLLOWING INFORMATION FOR THE PRODUCTS, WHICH HAVE NOT BEEN SOLD:  PRODUCT_ID, PRODUCT_DESC, 
-- PRODUCT_QUANTITY_AVAIL, PRODUCT_PRICE,INVENTORY VALUES(PRODUCT_QUANTITY_AVAIL*PRODUCT_PRICE), NEW_PRICE AFTER APPLYING DISCOUNT 
-- AS PER BELOW CRITERIA. SORT THE OUTPUT WITH RESPECT TO DECREASING VALUE OF INVENTORY_VALUE.
	-- i.IF PRODUCT PRICE > 20,000 THEN APPLY 20% DISCOUNT
    -- ii.IF PRODUCT PRICE > 10,000 THEN APPLY 15% DISCOUNT
    -- iii.IF PRODUCT PRICE =< 10,000 THEN APPLY 10% DISCOUNT
    
    -- HINT: USE CASE STATEMENT, NO PERMANENT CHANGE IN TABLE REQUIRED. [NOTE: TABLES TO BE USED -PRODUCT, ORDER_ITEMS TABLE] 
    

SELECT 
	P.PRODUCT_ID, 
	P.PRODUCT_DESC, 
	P.PRODUCT_QUANTITY_AVAIL, 
	P.PRODUCT_PRICE, 
	(P.PRODUCT_QUANTITY_AVAIL * P.PRODUCT_PRICE) AS INVENTORY_VALUES,
	CASE
		WHEN P.PRODUCT_PRICE > 20000 THEN (P.PRODUCT_PRICE - (P.PRODUCT_PRICE * 0.2))
		WHEN P.PRODUCT_PRICE > 10000 THEN (P.PRODUCT_PRICE - (P.PRODUCT_PRICE * 0.15))
		WHEN P.PRODUCT_PRICE <= 10000 THEN (P.PRODUCT_PRICE - (P.PRODUCT_PRICE * 0.1))
		END AS NEW_PRICE  
	FROM PRODUCT AS P
	LEFT JOIN ORDER_ITEMS AS OI
	ON P.PRODUCT_ID = OI.PRODUCT_ID
	WHERE OI.ORDER_ID IS NULL
	ORDER BY INVENTORY_VALUES DESC
	LIMIT 5;
    
   
   

-- 3. WRITE A QUERY TO DISPLAY PRODUCT_CLASS_CODE, PRODUCT_CLASS_DESCRIPTION, COUNT OF PRODUCT TYPE IN EACH PRODUCT CLASS, 
-- INVENTORY VALUE (P.PRODUCT_QUANTITY_AVAIL*P.PRODUCT_PRICE). INFORMATION SHOULD BE DISPLAYED FOR ONLY THOSE PRODUCT_CLASS_CODE 
-- WHICH HAVE MORE THAN 1,00,000 INVENTORY VALUE. SORT THE OUTPUT WITH RESPECT TO DECREASING VALUE OF INVENTORY_VALUE.
	-- [NOTE: TABLES TO BE USED -PRODUCT, PRODUCT_CLASS]


    
SELECT 
	PC.PRODUCT_CLASS_CODE, 
	PC.PRODUCT_CLASS_DESC,
	COUNT(PRODUCT_ID) AS PRODUCT_COUNT,
	SUM(P.PRODUCT_QUANTITY_AVAIL*P.PRODUCT_PRICE) AS INVENTORY_VALUE
	FROM PRODUCT AS P 
	INNER JOIN PRODUCT_CLASS AS PC
	ON P.PRODUCT_CLASS_CODE = PC.PRODUCT_CLASS_CODE
	GROUP BY PRODUCT_CLASS_CODE, PRODUCT_CLASS_DESC
	HAVING SUM(P.PRODUCT_QUANTITY_AVAIL*P.PRODUCT_PRICE) > 100000
	ORDER BY INVENTORY_VALUE DESC;




-- 4. WRITE A QUERY TO DISPLAY CUSTOMER_ID, FULL NAME, CUSTOMER_EMAIL, CUSTOMER_PHONE AND COUNTRY OF CUSTOMERS WHO HAVE CANCELLED 
-- ALL THE ORDERS PLACED BY THEM(USE SUB-QUERY)
	-- [NOTE: TABLES TO BE USED - ONLINE_CUSTOMER, ADDRESSS, ORDER_HEADER]



SELECT 
	CONCAT(OC.CUSTOMER_FNAME, "  ", OC.CUSTOMER_LNAME) AS FULL_NAME,
	OC.CUSTOMER_EMAIL,
	OC.CUSTOMER_PHONE,
	A.COUNTRY,
	OH.ORDER_STATUS
	FROM 
	ONLINE_CUSTOMER AS OC
	LEFT JOIN ADDRESS AS A USING (ADDRESS_ID)
	LEFT JOIN ORDER_HEADER AS OH USING (CUSTOMER_ID)
	WHERE OC.CUSTOMER_ID IN 
	(SELECT 
		OC.CUSTOMER_ID
		FROM ONLINE_CUSTOMER AS OC
		WHERE OH.ORDER_STATUS = 'CANCELLED');



        
        
-- 5. WRITE A QUERY TO DISPLAY SHIPPER NAME, CITY TO WHICH IT IS CATERING, NUMBER OF CUSTOMER CATERED BY THE SHIPPER IN THE CITY AND 
-- NUMBER OF CONSIGNMENTS DELIVERED TO THAT CITY FOR SHIPPER DHL(9 ROWS)
	-- [NOTE: TABLES TO BE USED -SHIPPER, ONLINE_CUSTOMER, ADDRESSS, ORDER_HEADER]
    



SELECT 
	SH.SHIPPER_NAME, 
	AD.CITY,
	COUNT(DISTINCT OC.CUSTOMER_ID) AS CUSTOMERS_CATERED,
	COUNT(OH.ORDER_ID) AS CONSIGNMENTS_DELIVERED
	FROM  SHIPPER AS SH
	INNER JOIN ORDER_HEADER OH USING (SHIPPER_ID)
	INNER JOIN ONLINE_CUSTOMER AS OC USING (CUSTOMER_ID)
	INNER JOIN ADDRESS AS AD USING (ADDRESS_ID)
	WHERE SH.SHIPPER_NAME = 'DHL'
	GROUP BY 1,2;




-- 6. WRITE A QUERY TO DISPLAY CUSTOMER ID, CUSTOMER FULL NAME, TOTAL QUANTITY AND TOTAL VALUE (QUANTITY*PRICE) SHIPPED WHERE MODE 
-- OF PAYMENT IS CASH AND CUSTOMER LAST NAME STARTS WITH 'G'
	-- [NOTE: TABLES TO BE USED -ONLINE_CUSTOMER, ORDER_ITEMS, PRODUCT, ORDER_HEADER]



SELECT 
	OC.CUSTOMER_ID,
	CONCAT(OC.CUSTOMER_FNAME ,"  ", OC.CUSTOMER_LNAME) AS CUSTOMER_FULL_NAME,
	SUM(OI.PRODUCT_QUANTITY) AS TOTAL_QUANTITY,
	SUM(OI.PRODUCT_QUANTITY * P.PRODUCT_PRICE) AS TOTAL_VALUE
	FROM ONLINE_CUSTOMER AS OC
	INNER JOIN ORDER_HEADER AS OH USING (CUSTOMER_ID)
	INNER JOIN ORDER_ITEMS AS OI USING (ORDER_ID)
	INNER JOIN PRODUCT AS P USING (PRODUCT_ID)
	WHERE OH.PAYMENT_MODE = 'CASH'
	AND OC.CUSTOMER_LNAME LIKE 'G%'
	GROUP BY 1,2;    



    
-- 7. WRITE A QUERY TO DISPLAY ORDER_ID AND VOLUME OF BIGGEST ORDER (IN TERMS OF VOLUME) THAT CAN FIT IN CARTON ID 10  
	-- [NOTE: TABLES TO BE USED -CARTON, ORDER_ITEMS, PRODUCT]
    


SELECT 
    ORDER_ID,
    SUM(PRODUCT_QUANTITY * P.LEN * P.WIDTH * P.HEIGHT) AS VOLUME
	FROM ORDER_ITEMS AS OI
	INNER JOIN PRODUCT AS P USING (PRODUCT_ID)
	GROUP BY 1
	HAVING 
    SUM(PRODUCT_QUANTITY * P.LEN * P.WIDTH * P.HEIGHT) <
    (SELECT 
		(C.LEN*C.WIDTH*C.HEIGHT)
		FROM CARTON AS C
		WHERE C.CARTON_ID = 10)
	ORDER BY 2 DESC
	LIMIT 1;




-- 8. WRITE A QUERY TO DISPLAY PRODUCT_ID, PRODUCT_DESC, PRODUCT_QUANTITY_AVAIL, QUANTITY SOLD, AND SHOW INVENTORY STATUS OF 
-- PRODUCTS AS BELOW AS PER BELOW CONDITION:
	-- A.FOR ELECTRONICS AND COMPUTER CATEGORIES, 
		-- i.IF SALES TILL DATE IS ZERO THEN SHOW 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY',
        -- ii.IF INVENTORY QUANTITY IS LESS THAN 10% OF QUANTITY SOLD, SHOW 'LOW INVENTORY, NEED TO ADD INVENTORY', 
        -- iii.IF INVENTORY QUANTITY IS LESS THAN 50% OF QUANTITY SOLD, SHOW 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY', 
        -- iv.IF INVENTORY QUANTITY IS MORE OR EQUAL TO 50% OF QUANTITY SOLD, SHOW 'SUFFICIENT INVENTORY'
	-- B.FOR MOBILES AND WATCHES CATEGORIES, 
		-- i.IF SALES TILL DATE IS ZERO THEN SHOW 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY', 
        -- ii.IF INVENTORY QUANTITY IS LESS THAN 20% OF QUANTITY SOLD, SHOW 'LOW INVENTORY, NEED TO ADD INVENTORY',  
        -- iii.IF INVENTORY QUANTITY IS LESS THAN 60% OF QUANTITY SOLD, SHOW 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY', 
        -- iv.IF INVENTORY QUANTITY IS MORE OR EQUAL TO 60% OF QUANTITY SOLD, SHOW 'SUFFICIENT INVENTORY'
	-- C.REST OF THE CATEGORIES, 
		-- i.IF SALES TILL DATE IS ZERO THEN SHOW 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY', 
        -- ii.IF INVENTORY QUANTITY IS LESS THAN 30% OF QUANTITY SOLD, SHOW 'LOW INVENTORY, NEED TO ADD INVENTORY',  
        -- iii.IF INVENTORY QUANTITY IS LESS THAN 70% OF QUANTITY SOLD, SHOW 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY', 
        -- iv. IF INVENTORY QUANTITY IS MORE OR EQUAL TO 70% OF QUANTITY SOLD, SHOW 'SUFFICIENT INVENTORY'
        
			-- [NOTE: TABLES TO BE USED -PRODUCT, PRODUCT_CLASS, ORDER_ITEMS] (USE SUB-QUERY)

-- 8A


SELECT 
	OI.PRODUCT_ID, 
    P.PRODUCT_DESC,
    PC.PRODUCT_CLASS_DESC,
    P.PRODUCT_QUANTITY_AVAIL,
    SUM(OI.PRODUCT_QUANTITY) AS QUANTITY_SOLD,
		CASE
			WHEN SUM(OI.PRODUCT_QUANTITY) = 0 THEN 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY'
			WHEN (P.PRODUCT_QUANTITY_AVAIL) < 0.1 * SUM(OI.PRODUCT_QUANTITY) THEN 'LOW INVENTORY, NEED TO ADD INVENTORY'
			WHEN (P.PRODUCT_QUANTITY_AVAIL) < 0.5 * SUM(OI.PRODUCT_QUANTITY) THEN 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY'
			WHEN (P.PRODUCT_QUANTITY_AVAIL) > 0.5 * SUM(OI.PRODUCT_QUANTITY) OR SUM(P.PRODUCT_QUANTITY_AVAIL) = 0.5 * SUM(OI.PRODUCT_QUANTITY) THEN 'SUFFICIENT INVENTORY'
		END AS INVENTORY_STATUS
	FROM ORDER_ITEMS AS OI
	INNER JOIN PRODUCT AS P USING (PRODUCT_ID)
	INNER JOIN PRODUCT_CLASS AS PC USING (PRODUCT_CLASS_CODE)
	WHERE PC.PRODUCT_CLASS_DESC IN ('ELECTRONICS', 'COMPUTER')
	GROUP BY 1,2,3;


-- 8B


SELECT 
	OI.PRODUCT_ID,  
    P.PRODUCT_DESC,
    PC.PRODUCT_CLASS_DESC,
    P.PRODUCT_QUANTITY_AVAIL,
    SUM(OI.PRODUCT_QUANTITY) AS QUANTITY_SOLD,
		CASE
			WHEN SUM(OI.PRODUCT_QUANTITY) = 0 THEN 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY'
			WHEN (P.PRODUCT_QUANTITY_AVAIL) < 0.2 * SUM(OI.PRODUCT_QUANTITY) THEN 'LOW INVENTORY, NEED TO ADD INVENTORY'
			WHEN (P.PRODUCT_QUANTITY_AVAIL) < 0.6 * SUM(OI.PRODUCT_QUANTITY) THEN 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY'
			WHEN (P.PRODUCT_QUANTITY_AVAIL) > 0.6 * SUM(OI.PRODUCT_QUANTITY) OR (P.PRODUCT_QUANTITY_AVAIL) = 0.6 * SUM(OI.PRODUCT_QUANTITY) THEN 'SUFFICIENT INVENTORY'
		END AS INVENTORY_STATUS
	FROM ORDER_ITEMS AS OI
	INNER JOIN PRODUCT AS P USING (PRODUCT_ID)
	INNER JOIN PRODUCT_CLASS AS PC USING (PRODUCT_CLASS_CODE)
	WHERE PC.PRODUCT_CLASS_DESC IN ('MOBILES', 'WATCHES')
	GROUP BY 1,2,3; 



-- 8C



SELECT 
	OI.PRODUCT_ID,  
    P.PRODUCT_DESC,
    PC.PRODUCT_CLASS_DESC,
    P.PRODUCT_QUANTITY_AVAIL,
    SUM(OI.PRODUCT_QUANTITY) AS QUANTITY_SOLD,
		CASE
			WHEN SUM(OI.PRODUCT_QUANTITY) = 0 THEN 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY'
			WHEN (P.PRODUCT_QUANTITY_AVAIL) < 0.3 * SUM(OI.PRODUCT_QUANTITY) THEN 'LOW INVENTORY, NEED TO ADD INVENTORY'
			WHEN (P.PRODUCT_QUANTITY_AVAIL) < 0.7 * SUM(OI.PRODUCT_QUANTITY) THEN 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY'
			WHEN (P.PRODUCT_QUANTITY_AVAIL) > 0.7 * SUM(OI.PRODUCT_QUANTITY) OR (P.PRODUCT_QUANTITY_AVAIL) = 0.7 * SUM(OI.PRODUCT_QUANTITY) THEN 'SUFFICIENT INVENTORY'
		END AS INVENTORY_STATUS
	FROM ORDER_ITEMS AS OI
	INNER JOIN PRODUCT AS P USING (PRODUCT_ID)
	INNER JOIN PRODUCT_CLASS AS PC USING (PRODUCT_CLASS_CODE)
	WHERE PC.PRODUCT_CLASS_DESC NOT IN ('MOBILES', 'WATCHES','ELECTRONICS', 'COMPUTER' )
	GROUP BY 1,2,3;




    
-- 9. WRITE A QUERY TO DISPLAY PRODUCT_ID, PRODUCT_DESC AND TOTAL QUANTITY OF PRODUCTS WHICH ARE SOLD TOGETHER WITH PRODUCT ID 201 
-- AND ARE NOT SHIPPED TO CITY BANGALORE AND NEW DELHI. DISPLAY THE OUTPUT IN DESCENDING ORDER WITH RESPECT TO TOT_QTY.(USE SUB-QUERY)
	-- [NOTE: TABLES TO BE USED -ORDER_ITEMS,PRODUCT,ORDER_HEADER, ONLINE_CUSTOMER, ADDRESS]
    

	

SELECT 
    OI1.PRODUCT_ID,
    P.PRODUCT_DESC,
    SUM(OI1.PRODUCT_QUANTITY) AS TOTAL_QUANTITY
	FROM ORDER_ITEMS AS OI1
	INNER JOIN ORDER_ITEMS OI2 ON OI1.ORDER_ID = OI2.ORDER_ID AND OI2.PRODUCT_ID = 201
	INNER JOIN PRODUCT AS P ON OI1.PRODUCT_ID = P.PRODUCT_ID
	INNER JOIN ORDER_HEADER AS OH ON OI1.ORDER_ID = OH.ORDER_ID
	INNER JOIN ONLINE_CUSTOMER AS OC ON OH.CUSTOMER_ID = OC.CUSTOMER_ID
	INNER JOIN ADDRESS AS AD ON OC.ADDRESS_ID = AD.ADDRESS_ID
	WHERE OI1.PRODUCT_ID != 201
	AND AD.CITY NOT IN ('BANGALORE', 'NEW DELHI')
	GROUP BY OI1.PRODUCT_ID, P.PRODUCT_DESC
	ORDER BY TOTAL_QUANTITY DESC;




-- 10. WRITE A QUERY TO DISPLAY THE ORDER_ID,CUSTOMER_ID AND CUSTOMER FULLNAME AND TOTAL QUANTITY OF PRODUCTS SHIPPED FOR ORDER IDS 
-- WHICH ARE EVEN AND SHIPPED TO ADDRESS WHERE PINCODE IS NOT STARTING WITH "5" 
	-- [NOTE: TABLES TO BE USED - ONLINE_CUSTOMER,ORDER_HEADER, ORDER_ITEMS, ADDRESS]

    
    
SELECT 
	OI.ORDER_ID,
    OH.CUSTOMER_ID,
    CONCAT(OC.CUSTOMER_FNAME, "  ", OC.CUSTOMER_LNAME) AS CUSTOMER_FULLNAME,
    SUM(OI.PRODUCT_QUANTITY) AS TOTAL_QUANTITY_SHIPPED
	FROM ORDER_ITEMS AS OI
	INNER JOIN ORDER_HEADER AS OH USING(ORDER_ID)
	INNER JOIN ONLINE_CUSTOMER AS OC USING(CUSTOMER_ID)
	INNER JOIN ADDRESS AS AD USING(ADDRESS_ID)
	WHERE OI.ORDER_ID % 2 = 0
	AND NOT (AD.PINCODE LIKE '5%')
	GROUP BY 1,2,3;
    
    
    